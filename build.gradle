buildscript {
    repositories {
        maven {
            url uri('https://plugins.gradle.org/m2/')
        }
    }
    // dependencies {
        // apply from: 'https://raw.githubusercontent.com/i-net-software/SetupBuilder/master/scripts/SetupBuilderVersion.gradle'
        // classpath 'gradle.plugin.de.inetsoftware:SetupBuilder:' + setupBuilderVersion()
    // }
}

plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'distribution'
    // id 'de.inetsoftware.appbundler' version "7.2.11"
    // id "edu.sc.seis.macAppBundle" version "2.3.0"
    id "com.scuilion.syntastic" version "0.3.9"
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id "de.inetsoftware.setupbuilder" version "7.2.20"
    id "org.panteleyev.jpackageplugin" version "1.6.0"
}

apply plugin: 'de.inetsoftware.setupbuilder'

repositories {
    mavenCentral()
    flatDir {
        dirs '/Users/jkw/.mu/lib'
    }
}

/*mac {
    // Generic parameter value for OS X build
    icon 'src/resources/nausicaa.icns'
}*/


dependencies {
    implementation 'net.sf.trove4j:trove4j:3.0.3'
    implementation 'excelsiorg:solace:1.0'
    implementation 'excelsiorg:gimmal:1.0'
    implementation 'org.apache.groovy:groovy-all:4.0.15'
    implementation 'imgscalr:imgscalr-lib:4.2'
    implementation 'Fxyz:Fxyz-Core:1.0'
    implementation 'Fxyz:Fxyz-lib:1.0'
    implementation 'google:gson:2.8.5'
    implementation 'apache:log4j:1.2.15'
    implementation 'asomov:snakeyaml:1.21'
    implementation 'slf4j:slf4j-api:1.7.7'
    implementation 'slf4j:slf4j-log4j12:1.7.7'
    implementation 'apache:log4j:1.2.15'
    implementation 'mrj:MRJToolkitStubs:1.0'

    // console
    implementation 'org.swinglabs.swingx:swingx-all:1.6.5-1'
    implementation 'org.codehaus.griffon:swingxbuilder:0.3'


    // testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    // apply from: 'https://raw.githubusercontent.com/i-net-software/SetupBuilder/master/scripts/SetupBuilderVersion.gradle'
    // classpath 'gradle.plugin.de.inetsoftware:SetupBuilder:' + setupBuilderVersion()
}

// apply plugin: "de.inetsoftware.appbundler"

test {
    // useJUnit()
    useJUnitPlatform()

    maxHeapSize = '1G'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main']
        }
        resources {
            srcDirs = ['src/resources','src/etc']
        }
    }
    test {
        java {
            srcDirs = ['src/test']
        }
        // groovy {
            // srcDirs = ['src/test']
        // }
    }
}

javafx {
    version = '21'
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.swing', 'javafx.web' ]
}

application {
    applicationDefaultJvmArgs = [
        "-Xmx48g",
        "-Xdock:name=Nausicaa",
        "-Xdock:icon=build/resources/nausicaa.icns",
        "--add-opens","java.base/java.lang=ALL-UNNAMED",
        "--add-opens","java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-opens","java.base/java.util=ALL-UNNAMED",
        "--add-opens","java.base/java.util.concurrent=ALL-UNNAMED",
        "--add-opens","java.desktop/java.awt=ALL-UNNAMED",
        "--add-opens","java.desktop/javax.swing=ALL-UNNAMED",
        "--add-opens","javafx.graphics/javafx.scene.image=ALL-UNNAMED",
        "--add-opens","javafx.graphics/javafx.scene=ALL-UNNAMED",
        "--add-opens","javafx.graphics/javafx.scene.layout=ALL-UNNAMED",
        "--add-opens","javafx.graphics/javafx.scene.shape=ALL-UNNAMED",
        "--add-opens","javafx.controls/javafx.scene.control=ALL-UNNAMED",
        // "-Dprism.verbose=true",
        "-Dapple.laf.useScreenMenuBar=true",
        "-XX:-OmitStackTraceInFastThrow",
        "-Dapp.root=HACK_FOR_GRADLE"
        ]
    startScripts {
        doLast {
            unixScript.text = unixScript.text.replace('HACK_FOR_GRADLE', '\'\$APP_HOME\'')
            unixScript.text = unixScript.text.replace('-classpath','\$GRADLE_OPTS -classpath')
            windowsScript.text = windowsScript.text.replace('HACK_FOR_GRADLE', '%~dp0..')
        }
    }
    mainClass='org.excelsi.nausicaa.Nausicaa'
    version='1.2'
    group='excelsiorg'
}

tasks.named('test') {
    useJUnitPlatform()
}

distributions {
    main {
        distributionBaseName='Nausicaa'
        contents {
        }
    }
}

applicationDistribution.from("src/etc/") {
    into "etc"
}

setupBuilder {
    vendor          = "excelsiorg";
    copyright       = "Copyright Â© 2024 excelsiorg"
    description     = "Nausicaa";
    
    // optional, defaults to project name
    // application     = "My Application";

    version         = "1.2.0";
    appIdentifier   = "org.excelsi.nausicaa";

    // optional, defaults to {appIdentifier}-{version}
    // archiveName     = "com.application.my-1.0.0";

    icons           = "src/resources/nausicaa.icns";

    mainClass       = "org.excelsi.nausicaa.Nausicaa";
    
    // main jar file in the installed structure, relative to root.
    mainJar         = "libs/nausicaa-1.2.jar";

    destinationDir  = "";

    // optional, define the Java Runtime for the installation. See below
    // bundleJre       = <JRE DEFINITION>;
    
    // optional, a directory in the installed structure (will be created)
    // bundleJreTarget = "runtime";

    // optional, will make the gradle job fail if not CopySpec source is given
    failOnEmptyFrom = "true";
}


// System.err.println("#############")
// System.err.println(java.util.Arrays.asList(project.class.methods))
// System.err.println("#############")
import org.gradle.api.tasks.Internal 

/*
Plugin is broken
dmg {
    // The user the services will be executed with, defaults to root
    daemonUser = "root" 

    // optional, sets an application identifier for the DMG builder.
    // It is being used as ID in the Info.plist
    applicationIdentifier = "org.excelsi.nausicaa.Nausicaa"

    // a background image used for the `.dmg` file
    // backgroundImage = "background.png"
    
    // the background image used in the `.pkg` installer file
    // setupBackground = "setup.png"

    // the background image used in the `.pkg` installer file for dark mode
    // setupDarkBackground = "setup.png"
    
    // optional, the icon of the `.pkg` installer file
    setupIcon = "setup.icns"
    
    // a Java java.awt.Color Object - used as background color in the `.dmg` image
    backgroundColor = new java.awt.Color( 31, 31, 31);
    
    // optional, sets the `.dmg` window width
    windowWidth = 400
    
    // optional, sets the `.dmg` window height
    windowHeight = 300

    // optional, width correction of the `.dmg` window
    // this may be needed if there is a background-image
    // set which does not take the borders of the window into account
    windowWidthCorrection = 0
    
    // optional, height correction of the `.dmg` window
    // this may be needed if there is a background-image
    // set which does not take the borders of the window into account
    windowHeightCorrection = 22

    // optional, the size of the icons in the `.dmg`. Defaults to 128
    iconSize = 128
    
    // optional, the fontSize of the `.dmg` file names displayed below the application items
    fontSize = 14

    // definition of the first page displayed in a package installer
    // can be defined multiple times
    // welcomePage { ... }
    
    // definition of the last page displayed in a package installer
    // can be defined multiple times
    // conclusionPage { ... }

    // Code Signing information
    codeSign { }
}
*/


/*
macAppBundle {
    appName='Nausicaa'
    mainClassName = project.mainClassName
    // makeicns -in src/resources/na1_1024.png -out src/resources/nausicaa.icns
    icon = 'src/resources/nausicaa.icns'
    bundleJRE = false
    javaProperties.put("apple.laf.useScreenMenuBar", "true")
    appStyle='Oracle'
}
*/
